{
    integer :: id = 0
    contains
    function temp() result(res)
        character(len=:), allocatable :: res
        character(len=32) :: temp_str
        id = id + 1
        write(temp_str, '(A, I0)') "t", id
        res = trim(adjustl(temp_str)) 
    end function temp
}

s = (e ";" _)*

e = left:t "+" right:e {
        character(len=:), allocatable :: res
        res = temp()
        print *, res // " = " // left // " + " // right
    }
    / left:t "-" right:e {
        character(len=:), allocatable :: res
        res = temp()
        print *, res // " = " // left // " - " // right
    }
    / t

t = left:f "*" right:t {
        character(len=:), allocatable :: res
        res = temp()
        print *, res // " = " // left // " * " // right 
    }
    / left:f "/" right:t {
        character(len=:), allocatable :: res
        res = temp()
        print *, res // " = " // left // " / " // right 
    }
    / f 

f = _ "(" exp:e ")" _ {
        character(len=:), allocatable :: res
        res = exp
    }
    / _ num:[0-9]+ _ {
    character(len=:), allocatable :: res
    res = num
}

_ = [ \t\n\r]*